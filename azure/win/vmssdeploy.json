{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_D4S_V3",

      "allowedValues": [
          "Standard_D4S_V3",
          "Standard_D2",
          "Standard_D3",
          "Standard_D4",
          "Standard_D11",
          "Standard_D12",
          "Standard_D13",
          "Standard_D14"
      ],
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
      }
    },

    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      },
      "maxValue": 100
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "sourceImageVhdUri": {
      "type": "string",
      "metadata": {
        "description": "The source of the blob containing the custom image, must be in the same region of the deployment."
      },
      "defaultValue": ""
    },
    "appPackage": {
      "type": "string",
      "metadata":{
        "description": "The source of the application package to copy using the configuration.sh script it should be inside the _artifacts/app folder"
      },
      "defaultValue": "package.tar.gz"
    },
    "destinationFolder": {
      "type": "string",
      "metadata":{
        "description":"path were the appPackage will be copied inside the Linux machine"
      },
      "defaultValue": "/nodeserver"
    },
    "serviceName": {
      "type": "string",
      "metadata":{
        "description":"name of the service that needs restart when the new package is copied"
      },
      "defaultValue": "mainsite.service"
    },
    "_artifactsLocation": {
        "type": "string",
        "metadata": {
            "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        },
        "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vmss-linux-customimage-autoscale"
    },
    "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
            "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
        },
        "defaultValue": ""
    },

    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "This is the OS that your VM will be running"
      }
    },
    "frontEndLBPort": {
      "type": "int",
      "metadata": {
        "description": "The front end port to load balance"
      },
      "defaultValue": 80
    },
    "backEndLBPort": {
      "type": "int",
      "metadata": {
        "description": "The front end port to load balance"
      },
      "defaultValue": 80
    },
    "probeIntervalInSeconds": {
      "type": "int",
      "metadata": {
        "description": "The interval between load balancer health probes"
      },
      "defaultValue": 15
    },
    "numberOfProbes": {
      "type": "int",
      "metadata": {
        "description": "The number of probes that need to fail before a VM instance is deemed unhealthy"
      },
      "defaultValue": 5
    },
    "probeRequestPath": {
      "type": "string",
      "metadata": {
        "description": "The path used for the load balancer health probe"
      },
      "defaultValue": "/iisstart.htm"
    },
    "customScriptUri": {
      "type": "string",
      "metadata": {
        "description": "The url to th script in the resource storage account"
      },
      "defaultValue": ""
    },
    "customScriptName": {
      "type": "string",
      "metadata": {
        "description": "name of the custom script to be run by bash"
      },
      "defaultValue": "run.ps1"
    },
    "scanOrchestratorBranch": {
      "type": "string",
      "metadata": {
        "description": "The first argument to the extension script"
      },
      "defaultValue": ""
    },
    "matlabCoreBranch": {
      "type": "string",
      "metadata": {
        "description": "The second argument to the extension script"
      },
      "defaultValue": ""
    },

    "session_name": {
      "type": "string",
      "metadata": {
        "description": "The second argument to the extension script"
      },
      "defaultValue": ""
    },
    "resourcesStorageAccount": {
      "type": "string",
      "metadata": {
        "description": "The resource storage account name"
      },
      "defaultValue": ""
    },
    "resourcesStorageKey": {
      "type": "string",
      "metadata": {
        "description": "The key to the resource storage account"
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "vmssName":  "[concat(resourceGroup().name, 'vmss')]",
    "imageName": "[concat(resourceGroup().name, 'img')]",
    "namingInfix": "[toLower(substring(concat(variables('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "longNamingInfix": "[toLower(variables('vmssName'))]",
    "jumpBoxName": "['jumpbox']",
    "jumpBoxSAName": "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), 'jumpboxsa')), 'jb')]",
    "jumpBoxOSDiskName": "[concat(variables('jumpBoxName'), 'osdisk')]",
    "jumpBoxVHDContainerName": "[concat(variables('jumpBoxName'), 'vhd')]",
    "jumpBoxIPConfigName": "[concat(variables('jumpBoxName'), 'ipconfig')]",
    "jumpBoxNicName": "[concat(variables('jumpBoxName'), 'nic')]",
    "storageAccountType": "Standard_LRS",
    "newStorageAccountSuffix": "[concat(variables('namingInfix'), 'sa')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
    "subnetName": "[concat(variables('namingInfix'), 'subnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "nicName": "[concat(variables('namingInfix'), 'nic')]",
    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "osType": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "[parameters('windowsOSVersion')]",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-04-01",
    "storageApiVersion": "2015-06-15",
    "quote": "'"
  },
  "resources": [
     {
      "type": "Microsoft.Compute/images",
      "apiVersion": "2016-04-30-preview",
      "name": "[variables('imageName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "[parameters('osType')]",
            "osState": "Generalized",
            "blobUri": "[parameters('sourceImageVhdUri')]",
            "storageAccountType": "Standard_LRS"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('jumpBoxSAName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('storageApiVersion')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('longNamingInfix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('jumpBoxNicName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('jumpBoxIPConfigName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },{
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('jumpBoxName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('jumpBoxSAName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpBoxNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSku')]"
        },
        "osProfile": {
          "computerName": "[variables('jumpBoxName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[variables('jumpBoxOSDiskName')]",
            "vhd": {
              "uri": "[concat('http://',variables('jumpBoxSAName'),'.blob.core.windows.net/',variables('jumpBoxVHDContainerName'),'/',variables('jumpBoxOSDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('jumpBoxNicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('jumpBoxSAName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('vmssName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Compute/images/', variables('imageName'))]"
      ],
      "sku": {
        "name": "[parameters('vmSku')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "overprovision": "true",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {

          "storageProfile": {
            "imageReference": {
              "id": "[resourceId('Microsoft.Compute/images', variables('imageName'))]"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          },

          "extensionProfile": {
            "extensions": [{
                                "properties": {
                                    "publisher": "Microsoft.Compute",
                                    "type": "CustomScriptExtension",
                                    "typeHandlerVersion": "1.8",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                      "fileUris": [
                                        "[parameters('customScriptUri')]"
                                      ]
                                    },
                                    "protectedSettings": {
                                      "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File ', parameters('customScriptName'), ' ',  ' -scanOrchestratorBranch ',  parameters('scanOrchestratorBranch'), '  -matlabCoreBranch   ', parameters('matlabCoreBranch'), '  -session_name  ', parameters('session_name')",
                                      "storageAccountName":"[parameters('resourcesStorageAccount')]",
                                      "storageAccountKey":"[parameters('resourcesStorageKey')]"
                                    }
                                },
                                "name": "configurationextension"
                            }
                        ]
                    }
        }
      }
    }
  ]
}
